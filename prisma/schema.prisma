// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id                           String                         @id
  name                         String
  zone                         Zone                           @relation(fields: [zoneId], references: [id])
  zoneId                       String
  CupResults                   CupResult[]
  Maps                         Map[]
  ChallengeResults             ChallengeResult[]
  TimeAttack                   TimeAttack[]
  GlobalCupLeaderboard         GlobalCupLeaderboard[]
  MonthlyCupLeaderboard        MonthlyCupLeaderboard[]
  MapperLeaderboard            MapperLeaderboard[]
  GlobalTimeAttackLeaderboard  GlobalTimeAttackLeaderboard[]
  MonthlyTimeAttackLeaderboard MonthlyTimeAttackLeaderboard[]
  GlobalChallengeLeaderboard   GlobalChallengeLeaderboard[]
  MonthlyChallengeLeaderboard  MonthlyChallengeLeaderboard[]
}

model Cup {
  id            Int         @id
  name          String
  participants  Int
  year          Int
  month         Int
  day           Int
  version       Int
  leaderboardId Int
  cupResults    CupResult[]
}

model Challenge {
  id              Int               @id
  name            String
  year            Int
  month           Int
  day             Int
  version         Int
  leaderboardId   Int
  challengeResult ChallengeResult[]
}

model Zone {
  id        String   @id
  name      String
  flag      String
  parentId  String?
  parent    Zone?    @relation("ZoneParent", fields: [parentId], references: [id])
  displayId String?
  display   Zone?    @relation("ZoneDisplay", fields: [displayId], references: [id])
  children  Zone[]   @relation("ZoneParent")
  displays  Zone[]   @relation("ZoneDisplay")
  players   Player[]
}

model CupResult {
  cup      Cup    @relation(fields: [cupId], references: [id])
  player   Player @relation(fields: [playerId], references: [id])
  position Int
  points   Int
  cupId    Int
  playerId String

  @@id([cupId, playerId])
}

model ChallengeResult {
  player      Player    @relation(fields: [playerId], references: [id])
  playerId    String
  position    Int
  time        Int
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId Int

  @@id([playerId, challengeId])
}

model Map {
  id         String       @id
  uid        String
  author     Player       @relation(fields: [playerId], references: [id])
  playerId   String
  seasonUid  String
  thumbnail  String
  name       String
  authorTime Int
  goldTime   Int
  silverTime Int
  bronzeTime Int
  exchangeId String?
  style      String?
  type       String?
  year       Int
  month      Int
  day        Int
  upvotes    Int
  downvotes  Int
  TimeAttack TimeAttack[]

  @@unique([year, month, day])
}

model TimeAttack {
  player   Player @relation(fields: [playerId], references: [id])
  map      Map    @relation(fields: [mapId], references: [id])
  position Int
  time     Int
  playerId String
  mapId    String

  @@id([playerId, mapId])
}

model GlobalCupLeaderboard {
  playerId   String @id
  version    Int
  amount     Int
  player     Player @relation(fields: [playerId], references: [id])
  points     Int
  first      Int
  second     Int
  third      Int
  top8       Int
  top16      Int
  top32      Int
  top64      Int
  top128     Int
  bestResult Int
  average    Int
  position   Int
}

model MonthlyCupLeaderboard {
  playerId   String @id
  version    Int
  amount     Int
  player     Player @relation(fields: [playerId], references: [id])
  points     Int
  year       Int
  month      Int
  first      Int
  second     Int
  third      Int
  top8       Int
  top16      Int
  top32      Int
  top64      Int
  top128     Int
  bestResult Int
  average    Float
  position   Int
}

model MapperLeaderboard {
  playerId String @id
  player   Player @relation(fields: [playerId], references: [id])
  amount   Int
  position Int
}

model GlobalTimeAttackLeaderboard {
  playerId   String @id
  player     Player @relation(fields: [playerId], references: [id])
  amount     Int
  points     Int
  first      Int
  second     Int
  third      Int
  top5       Int
  top10      Int
  top25      Int
  top50      Int
  top100     Int
  top500     Int
  bestResult Int
  average    Float
  position   Int
}

model MonthlyTimeAttackLeaderboard {
  playerId   String @id
  player     Player @relation(fields: [playerId], references: [id])
  year       Int
  month      Int
  amount     Int
  points     Int
  first      Int
  second     Int
  third      Int
  top5       Int
  top10      Int
  top25      Int
  top50      Int
  top100     Int
  top500     Int
  bestResult Int
  average    Float
  position   Int
}

model GlobalChallengeLeaderboard {
  playerId   String @id
  player     Player @relation(fields: [playerId], references: [id])
  amount     Int
  points     Int
  first      Int
  second     Int
  third      Int
  top8       Int
  top16      Int
  top32      Int
  top64      Int
  top128     Int
  bestResult Int
  average    Float
  position   Int
}

model MonthlyChallengeLeaderboard {
  playerId   String @id
  player     Player @relation(fields: [playerId], references: [id])
  year       Int
  month      Int
  amount     Int
  points     Int
  first      Int
  second     Int
  third      Int
  top8       Int
  top16      Int
  top32      Int
  top64      Int
  top128     Int
  bestResult Int
  average    Float
  position   Int
}
